<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="4" time="0.056" timestamp="2024-08-11T18:15:54.667091+05:30" hostname="MSI"><testcase classname="test_library.TestLibrary" name="test_add_book" time="0.001" /><testcase classname="test_library.TestLibrary" name="test_available_books" time="0.001"><failure message="ValueError: Book is not available">self = &lt;test_library.TestLibrary testMethod=test_available_books&gt;

    def test_available_books(self):
        library = Library()
        book1 = Book("1", "Test Book 1", "Author Name", 2024)
        book2 = Book("2", "Test Book 2", "Another Author", 2023)
        library.add_book(book1)
        library.add_book(book2)
&gt;       library.borrow_book("12")

test_library.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;library.Library object at 0x000001F021F263C0&gt;, id = '12'

    def borrow_book(self, id):
        for book in self.books:
            if book.id == id and book.available:
                book.available = False
                return
&gt;       raise ValueError("Book is not available")
E       ValueError: Book is not available

library.py:21: ValueError</failure></testcase><testcase classname="test_library.TestLibrary" name="test_borrow_book" time="0.000" /><testcase classname="test_library.TestLibrary" name="test_return_book" time="0.000" /></testsuite></testsuites>